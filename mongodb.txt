show dbs - show databases
use flights - swith to database flights

db.flightData.insertOne({...}) - insert json
db.flightData.find() - get data

Create:
insertOne(data, options)
insertMany(data, options)

Read:
find(filter, options)
findOne(filter, options)    

Update:
updateOne(filter, data, options)
updateMany(filter, data, options)
replaceOne(filter, data, options)

Delete:
deleteOne(filter, options)
deleteMany(filter, options)


db.flightData.updateOne({distance: 12000}, {$set: {marker: "delete"}}) - set to pass the change
db.flightData.find({distance: {$gt: 10000}} - greater than 10000

update vs updateMany - update override the entire object

find() - gives cursor not an object
find().toArray() - gives the objects
find().forEach() - iterate over the objects
db.passengers.find().forEach((passengerData) => {printjson(passengerData)}

projection - one can choose only these key values we would like use
db.passengers.find({}, {name: 1, _id: 0}) - retrieve only names

db.passengers.findOne({name: 'Albert Twostone'}).hobbies - access array
[ 'sports', 'cooking' ]

db.passengers.find({hobbies: "sports"}) - filter in array
db.flightData.find({"status.description": 'On-time'}) - filter in subobject


To get rid of your data, you can simply load the database you want to get rid of (use databaseName) and then execute db.dropDatabase().
Similarly, you could get rid of a single collection in a database via db.myCollection.drop().


$lookup - aggregate data - book has authors field with an array of id of authors
db.books.aggregate([{$lookup: {from: "authors", localField: "authors", foreignField: "_id", as: "creators"}}])

*** SCHEMA ***
db.createCollection("posts", {validator: {$jsonSchema: {bsonType: "object", required: ["title, text, creator, comments"]}}}) - to create collection with schema validation
db.runCommand({collMod: "posts",   validator: { $jsonSchema: {}}) - to update existing schema


*** INSERT ***
    insertOne(): https://docs.mongodb.com/manual/reference/method/db.collection.insertOne/
    insertMany(): https://docs.mongodb.com/manual/reference/method/db.collection.insertMany/
    Atomicity: https://docs.mongodb.com/manual/core/write-operations-atomicity/#atomicity
    Write Concern: https://docs.mongodb.com/manual/reference/write-concern/
    Using mongoimport: https://docs.mongodb.com/manual/reference/program/mongoimport/index.html


db.hobbies.insertMany([{_id: "yoga", name: "yoga"}, {_id: "cooking", name: "cooking"}, {_id: "hiking", name: "hiking"}], {ordered: false}) - turn off ordered insert, continue after error occured

db.persons.insertOne({name: "Chrissy", age: 41}, {writeConcern: {w:0}}) - does not wait for  write 
db.persons.insertOne({name: "Michael", age: 41}, {writeConcern: {w:1, j: true}}) - wait till it's written to journal
db.persons.insertOne({name: "Aliya", age: 22}, {writeConcern: {w:1, j: true, wtimeout: 1}}) - write timeout

mongoimport tv-shows.json -d movieData -c movies --jsonArray --drop - to import data from json file


*** FIND ***
    https://docs.mongodb.com/manual/reference/method/db.collection.find/

    * operators *
    https://docs.mongodb.com/manual/reference/operator/query/

find({runtime: {$lt: 60}}) - runtime < 60
$ne, $eq, $gt, $lt, $lte, $gte
$in, $nin
find({runtime: {$in: [30, 42]}}) - runtine == 30 or runtime == 42

find({$or: [{"rating.average": {$lt: 5}}, {"rating.average": {$gt: 9.3}}] }) - rating.average < 5 or rating.average > 9.3
$nor = not or

$and
find({ $and: [{ "rating.average": { $gt: 9 } }, { "genres": "Drama" }] })
the same as:
find({"rating.average": {$gt: 9}, genres: "Drama"})

find({runtime: {$not: {$eq: 60}}}) - != 60


find({age: {$exists: true}} - all documents that have age
find({age: {$exists: true, $ne: null}}) - all document with age and not null age
find({phone: {$type: "number"}}) - all documents that have phone as number


find({summary: {$regex: /musical/}}) - regex

find({$expr: {$gt: ["$volume", "$target"]}}) - data where volume > target
find({$expr: {$gt: [{$cond: {if: {$gte: ["$volume", 190]}, then: {$subtract: ["$volume", 30]}, else: "$volume"}}, "$target"]}}) - data where volume > target when volume < 190 or volume - 30 > target when volume >=190
        
arrays
find({hobbies: {$size: 3}}) - objects with 3 hobbies
find({"genre": {$all: ["action", "thriller"]}}) - objects that have action of thiller in any order
find({hobbies: {$elemMatch: {title: "Sports", frequency: {$gte: 3}}}}) - documents where item array has title Sports and frequence >= 3
find({ratings: {$elemMatch: {$gt: 8, $lt: 10}}}) - element > 8 and < 10

    * cursor *
    https://docs.mongodb.com/manual/tutorial/iterate-a-cursor/
const dataCursor = db.movies.find() - get cursor
dataCursor.next() - get next document
dataCursor.hasNext() - check if there is next document
dataCursor.forEach((doc) => {printjson(doc)}) - loop over all documents
find().sort({"rating.average": -1}) - sort DESC, (-1: DESC, 1: ASC)
find().skip(10) - skip first 10 documents
find().limit(10) - retrieve only 10

    * projection *
find({}, {name: 1, genres: 1, runtime: 1, rating: 1, _id: 0}) - retrieve only name, genres, ... but not _id
find({genres: "Drama"}, {"genres.$": 1}) - display only genres: Drama, genres is an array
find({genres: "Drama"}, {genres: {$elemMatch: {$eq: "Horror"}}}) - display only genres: Horror
find({genres: "Drama"}, {genres: {$slice: 2}, name: 1} - only first to genres
find({genres: "Drama"}, {genres: {$slice: [1, 2]}, name: 1}) - skip first, limit 2


*** UPDATE ***
    https://docs.mongodb.com/manual/tutorial/update-documents/
    

